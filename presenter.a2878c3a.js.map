{"mappings":"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","sources":["<anon>","src/presenter.js","src/balance.js","src/gastos.js","src/gasto.js","src/ingresos.js","src/ingresoConstructor.js","src/presupuestos.js","src/historialgastos.js","src/historialingresos.js","src/balancesPorFechas.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequirec771\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"7xkmY\", function(module, exports) {\n\nvar $e3h3F = parcelRequire(\"e3h3F\");\n\nvar $bOScl = parcelRequire(\"bOScl\");\n\nvar $Z8IgN = parcelRequire(\"Z8IgN\");\n\nvar $klC2j = parcelRequire(\"klC2j\");\n\nvar $3OX67 = parcelRequire(\"3OX67\");\n\nvar $bt1BM = parcelRequire(\"bt1BM\");\n\nvar $021eu = parcelRequire(\"021eu\");\n// Instanciar clases\nconst $57cb6a7508f5bff5$var$gastos = new (0, $bOScl.default)();\nconst $57cb6a7508f5bff5$var$ingresos = new (0, $Z8IgN.default)();\nconst $57cb6a7508f5bff5$var$balance = new (0, $e3h3F.default)($57cb6a7508f5bff5$var$gastos, $57cb6a7508f5bff5$var$ingresos);\nconst $57cb6a7508f5bff5$var$historial = new (0, $3OX67.default)($57cb6a7508f5bff5$var$gastos);\nconst $57cb6a7508f5bff5$var$historialIngresos = new (0, $bt1BM.default)($57cb6a7508f5bff5$var$ingresos); // Crear instancia de HistorialIngresos\n// ***** Manejo de Balance *****\nconst $57cb6a7508f5bff5$var$balanceDiv = document.querySelector(\"#balance-div\");\nconst $57cb6a7508f5bff5$var$actualizarBalance = ()=>{\n    const balanceActual = $57cb6a7508f5bff5$var$balance.calcularBalance(); // Calcular el balance\n    $57cb6a7508f5bff5$var$balanceDiv.innerHTML = `<p>Balance: ${balanceActual}</p>`; // Mostrar balance\n};\n// ***** Manejo de Gastos *****\nconst $57cb6a7508f5bff5$var$formGastos = document.querySelector(\"#gastos-form\");\nconst $57cb6a7508f5bff5$var$gastosDiv = document.querySelector(\"#gastos-div\");\nconst $57cb6a7508f5bff5$var$historialDiv = document.querySelector(\"#historial-div\"); // Div para el historial\nconst $57cb6a7508f5bff5$var$displayGastos = (gastosAmostrar = [])=>{\n    $57cb6a7508f5bff5$var$gastosDiv.innerHTML = \"<ul>\";\n    gastosAmostrar.forEach(({ fecha: fecha, monto: monto, descripcion: descripcion, categoria: categoria }, index)=>{\n        $57cb6a7508f5bff5$var$gastosDiv.innerHTML += `<li>${fecha} | ${monto} | ${descripcion} | ${categoria}\n      <button class=\"editar-btn\" data-index=\"${index}\">Editar</button>\n      <button class=\"eliminar-btn\" data-index=\"${index}\">Eliminar</button>\n    </li>`;\n    });\n    $57cb6a7508f5bff5$var$gastosDiv.innerHTML += \"</ul>\";\n    document.querySelectorAll(\".editar-btn\").forEach((btn)=>btn.addEventListener(\"click\", (event)=>{\n            const index = event.target.dataset.index;\n            const gastoSeleccionado = $57cb6a7508f5bff5$var$gastos.obtenerGastos()[index];\n            $57cb6a7508f5bff5$var$rellenarFormularioGasto(gastoSeleccionado, index);\n        }));\n    document.querySelectorAll(\".eliminar-btn\").forEach((btn)=>btn.addEventListener(\"click\", (event)=>{\n            const index = event.target.dataset.index;\n            $57cb6a7508f5bff5$var$gastos.eliminarGasto(index);\n            $57cb6a7508f5bff5$var$displayGastos($57cb6a7508f5bff5$var$historial.obtenerGastosOrdenadosPorFecha());\n            $57cb6a7508f5bff5$var$actualizarBalance();\n        }));\n};\n$57cb6a7508f5bff5$var$formGastos.addEventListener(\"submit\", (event)=>{\n    event.preventDefault();\n    const fecha = document.querySelector(\"#fecha\").value;\n    const monto = parseFloat(document.querySelector(\"#monto\").value);\n    const descripcion = document.querySelector(\"#descripcion\").value;\n    const categoria = document.querySelector(\"#categoria\").value;\n    const nuevoGasto = {\n        fecha: fecha,\n        monto: monto,\n        descripcion: descripcion,\n        categoria: categoria\n    };\n    // Registrar el gasto\n    $57cb6a7508f5bff5$var$gastos.registrarGasto(fecha, monto, descripcion, categoria);\n    // Verificar el presupuesto y mostrar notificaciones\n    if ($57cb6a7508f5bff5$var$notificacionesDiv) {\n        const resultadoPresupuesto = $57cb6a7508f5bff5$var$presupuestito.verificarPresupuesto(nuevoGasto.monto);\n        console.log(\"Resultado de verificaci\\xf3n de presupuesto:\", resultadoPresupuesto); // Para depuración\n        $57cb6a7508f5bff5$var$notificacionesDiv.innerHTML = `<p>${resultadoPresupuesto.mensaje}</p>`;\n    } else console.error(\"El elemento #notificaciones no existe en el DOM.\");\n    // Actualizar la vista\n    $57cb6a7508f5bff5$var$displayGastos($57cb6a7508f5bff5$var$historial.obtenerGastosOrdenadosPorFecha());\n    $57cb6a7508f5bff5$var$actualizarBalance();\n});\n// ***** Manejo de Ingresos *****\nconst $57cb6a7508f5bff5$var$formIngresos = document.querySelector(\"#ingresos-form\");\nconst $57cb6a7508f5bff5$var$ingresosDiv = document.querySelector(\"#ingresos-div\");\nconst $57cb6a7508f5bff5$var$displayIngresos = (ingresosAmostrar = [])=>{\n    $57cb6a7508f5bff5$var$ingresosDiv.innerHTML = \"<ul>\";\n    ingresosAmostrar.forEach(({ fecha: fecha, monto: monto, descripcion: descripcion }, index)=>{\n        $57cb6a7508f5bff5$var$ingresosDiv.innerHTML += `\n      <li>\n        ${fecha} | ${monto} | ${descripcion}\n        <button class=\"editar-btn\" data-index=\"${index}\">Editar</button>\n        <button class=\"eliminar-btn\" data-index=\"${index}\">Eliminar</button>\n      </li>`;\n    });\n    $57cb6a7508f5bff5$var$ingresosDiv.innerHTML += \"</ul>\";\n    // Añadir eventos a los botones de edición\n    document.querySelectorAll(\".editar-btn\").forEach((btn)=>btn.addEventListener(\"click\", (event)=>{\n            const index = event.target.dataset.index;\n            const ingresoSeleccionado = $57cb6a7508f5bff5$var$ingresos.obtenerIngresos()[index];\n            $57cb6a7508f5bff5$var$rellenarFormularioIngreso(ingresoSeleccionado, index);\n        }));\n    document.querySelectorAll(\".eliminar-btn\").forEach((btn)=>btn.addEventListener(\"click\", (event)=>{\n            const index = event.target.dataset.index;\n            $57cb6a7508f5bff5$var$ingresos.eliminarIngreso(index);\n            $57cb6a7508f5bff5$var$actualizarVistaIngresos(); // Actualizar la vista después de eliminar\n        }));\n};\n$57cb6a7508f5bff5$var$formIngresos.addEventListener(\"submit\", (event)=>{\n    event.preventDefault();\n    const fechaIngreso = document.querySelector(\"#fecha-ingreso\").value;\n    const montoIngreso = parseFloat(document.querySelector(\"#monto-ingreso\").value);\n    const descripcionIngreso = document.querySelector(\"#fuente-ingreso\").value;\n    $57cb6a7508f5bff5$var$ingresos.registrarIngreso(fechaIngreso, montoIngreso, descripcionIngreso);\n    $57cb6a7508f5bff5$var$actualizarVistaIngresos(); // Actualizar la vista y balance\n});\n// ***** Función para rellenar el formulario con los datos del ingreso *****\nconst $57cb6a7508f5bff5$var$rellenarFormularioIngreso = (ingreso, index)=>{\n    document.querySelector(\"#fecha-ingreso\").value = ingreso.fecha;\n    document.querySelector(\"#monto-ingreso\").value = ingreso.monto;\n    document.querySelector(\"#fuente-ingreso\").value = ingreso.descripcion;\n    // Crear o mostrar el botón de guardar cambios\n    let guardarCambiosBtn = document.querySelector(\"#guardar-cambios-btn\");\n    if (!guardarCambiosBtn) {\n        guardarCambiosBtn = document.createElement(\"button\");\n        guardarCambiosBtn.id = \"guardar-cambios-btn\";\n        guardarCambiosBtn.textContent = \"Guardar Cambios\";\n        $57cb6a7508f5bff5$var$formIngresos.appendChild(guardarCambiosBtn);\n    }\n    guardarCambiosBtn.onclick = (e)=>{\n        e.preventDefault();\n        // Obtener los nuevos valores del formulario\n        const fecha = document.querySelector(\"#fecha-ingreso\").value;\n        const monto = parseFloat(document.querySelector(\"#monto-ingreso\").value);\n        const descripcion = document.querySelector(\"#fuente-ingreso\").value;\n        // Editar el ingreso utilizando la función en `ingresos.js`\n        $57cb6a7508f5bff5$var$ingresos.editarIngreso(index, {\n            fecha: fecha,\n            monto: monto,\n            descripcion: descripcion\n        });\n        // Actualizar la vista de ingresos y balance\n        $57cb6a7508f5bff5$var$actualizarVistaIngresos();\n        // Limpiar el formulario y eliminar el botón de guardar cambios\n        $57cb6a7508f5bff5$var$formIngresos.reset();\n        guardarCambiosBtn.remove();\n    };\n};\n// ***** Actualizar la vista después de registrar o editar *****\nconst $57cb6a7508f5bff5$var$actualizarVistaIngresos = ()=>{\n    $57cb6a7508f5bff5$var$displayIngresos($57cb6a7508f5bff5$var$ingresos.obtenerIngresos());\n    $57cb6a7508f5bff5$var$actualizarBalance(); // Actualizar el balance\n};\n// ***** Filtrar por Categoría *****\ndocument.querySelector(\"#filtrar-categoria-btn\").addEventListener(\"click\", ()=>{\n    const categoria = document.querySelector(\"#filtro-categoria\").value;\n    const gastosFiltrados = $57cb6a7508f5bff5$var$historial.filtrarGastosPorCategoria(categoria);\n    $57cb6a7508f5bff5$var$displayGastos(gastosFiltrados);\n});\n// ***** Filtrar por Rango de Fechas *****\ndocument.querySelector(\"#filtrar-fechas-btn\").addEventListener(\"click\", ()=>{\n    const fechaInicio = document.querySelector(\"#fecha-inicio\").value;\n    const fechaFin = document.querySelector(\"#fecha-fin\").value;\n    const gastosFiltrados = $57cb6a7508f5bff5$var$historial.filtrarGastosPorRangoFecha(fechaInicio, fechaFin);\n    $57cb6a7508f5bff5$var$displayGastos(gastosFiltrados);\n});\n// Presupuesto\nconst $57cb6a7508f5bff5$var$formPresupuesto = document.querySelector(\"#presupuesto-form\");\nconst $57cb6a7508f5bff5$var$presupuestoDiv = document.querySelector(\"#presupuesto-div\");\nconst $57cb6a7508f5bff5$var$notificacionesDiv = document.querySelector(\"#notificaciones\");\nconst $57cb6a7508f5bff5$var$presupuestito = new (0, $klC2j.default)();\n// Registrar un presupuesto general\n$57cb6a7508f5bff5$var$formPresupuesto.addEventListener(\"submit\", (event)=>{\n    event.preventDefault();\n    const montoPresupuesto = parseFloat(document.querySelector(\"#monto-presupuesto\").value);\n    $57cb6a7508f5bff5$var$presupuestito.agregarMonto(montoPresupuesto);\n    $57cb6a7508f5bff5$var$presupuestoDiv.innerHTML = `<p>${$57cb6a7508f5bff5$var$presupuestito.mostrarMonto()}</p>`;\n});\n// Verificar y notificar si se excede o se está cerca del presupuesto\nconst $57cb6a7508f5bff5$var$verificarPresupuesto = (gasto)=>{\n    if ($57cb6a7508f5bff5$var$presupuestito.verificarExceso(gasto.monto)) $57cb6a7508f5bff5$var$notificacionesDiv.innerHTML = `<p>\\xa1Has excedido el presupuesto general!</p>`;\n    else if ($57cb6a7508f5bff5$var$presupuestito.verificarCercania(gasto.monto)) $57cb6a7508f5bff5$var$notificacionesDiv.innerHTML = `<p>\\xa1Est\\xe1s cerca de exceder tu presupuesto general!</p>`;\n    else $57cb6a7508f5bff5$var$notificacionesDiv.innerHTML = \"\"; // Limpiar notificaciones si no hay problema\n};\n// Mostrar todos los gastos\ndocument.querySelector(\"#mostrar-todos-btn\").addEventListener(\"click\", ()=>{\n    const todosLosGastos = $57cb6a7508f5bff5$var$gastos.obtenerGastos();\n    $57cb6a7508f5bff5$var$displayGastos(todosLosGastos);\n});\n// ***** Filtrar ingresos por descripción *****\ndocument.querySelector(\"#filtrar-descripcion-btn\").addEventListener(\"click\", ()=>{\n    const descripcion = document.querySelector(\"#filtrar-descripcion\").value;\n    const ingresosFiltradosPorDescripcion = $57cb6a7508f5bff5$var$historialIngresos.filtrarIngresosPorDescripcion(descripcion);\n    $57cb6a7508f5bff5$var$displayIngresos(ingresosFiltradosPorDescripcion);\n});\n// ***** Filtrar ingresos por rango de fechas *****\ndocument.querySelector(\"#filtrar-fechas-ingreso-btn\").addEventListener(\"click\", ()=>{\n    const fechaInicio = document.querySelector(\"#fecha-ingreso-inicio\").value;\n    const fechaFin = document.querySelector(\"#fecha-ingreso-fin\").value;\n    const ingresosFiltradosPorFechas = $57cb6a7508f5bff5$var$historialIngresos.filtrarIngresosPorRangoFecha(fechaInicio, fechaFin);\n    $57cb6a7508f5bff5$var$displayIngresos(ingresosFiltradosPorFechas);\n});\n// Mostrar todos los ingresos\ndocument.querySelector(\"#mostrar-todos-ingresos-btn\").addEventListener(\"click\", ()=>{\n    $57cb6a7508f5bff5$var$displayIngresos($57cb6a7508f5bff5$var$historialIngresos.obtenerIngresosOrdenadosPorFecha());\n});\n//editar y eliminar gastos\n//Función para rellenar el formulario con los datos del gasto\nconst $57cb6a7508f5bff5$var$rellenarFormularioGasto = (gasto, index)=>{\n    document.querySelector(\"#fecha\").value = gasto.fecha;\n    document.querySelector(\"#monto\").value = gasto.monto;\n    document.querySelector(\"#descripcion\").value = gasto.descripcion;\n    document.querySelector(\"#categoria\").value = gasto.categoria;\n    // Crear o mostrar el botón de guardar cambios\n    let guardarCambiosBtn = document.querySelector(\"#guardar-cambios-btn\");\n    if (!guardarCambiosBtn) {\n        guardarCambiosBtn = document.createElement(\"button\");\n        guardarCambiosBtn.id = \"guardar-cambios-btn\";\n        guardarCambiosBtn.textContent = \"Guardar Cambios\";\n        $57cb6a7508f5bff5$var$formGastos.appendChild(guardarCambiosBtn);\n    }\n    guardarCambiosBtn.onclick = (e)=>{\n        e.preventDefault();\n        // Obtener los nuevos valores del formulario\n        const fecha = document.querySelector(\"#fecha\").value;\n        const monto = parseFloat(document.querySelector(\"#monto\").value);\n        const descripcion = document.querySelector(\"#descripcion\").value;\n        const categoria = document.querySelector(\"#categoria\").value;\n        // Editar el gasto utilizando la función en `gastos.js`\n        $57cb6a7508f5bff5$var$gastos.editarGasto(index, {\n            fecha: fecha,\n            monto: monto,\n            descripcion: descripcion,\n            categoria: categoria\n        });\n        // Actualizar la vista de gastos y balance\n        actualizarVistaGastos();\n        // Limpiar el formulario y eliminar el botón de guardar cambios\n        $57cb6a7508f5bff5$var$formGastos.reset();\n        guardarCambiosBtn.remove();\n    };\n    //actualizar vista de gastos\n    const actualizarVistaGastos = ()=>{\n        const todosLosGastos = $57cb6a7508f5bff5$var$gastos.obtenerGastos();\n        $57cb6a7508f5bff5$var$displayGastos(todosLosGastos);\n        $57cb6a7508f5bff5$var$actualizarBalance();\n    };\n    document.querySelector(\"#exportar-excel-btn\").addEventListener(\"click\", ()=>{\n        const csv = $57cb6a7508f5bff5$var$gastos.exportarGastosaExcel();\n        const blob = new Blob([\n            csv\n        ], {\n            type: \"text/csv;charset=utf-8;\"\n        });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement(\"a\");\n        a.href = url;\n        a.download = \"gastos.csv\";\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        URL.revokeObjectURL(url);\n    });\n};\n// Aquí se colocan las funciones y manejadores de eventos\nconst $57cb6a7508f5bff5$var$generarHistorialBalancesPorFechas = ()=>{\n    const fechaInicio = document.querySelector(\"#fecha-balance-inicio\").value;\n    const fechaFin = document.querySelector(\"#fecha-balance-fin\").value;\n    if (!fechaInicio || !fechaFin) {\n        console.error(\"Debe ingresar un rango de fechas v\\xe1lido.\");\n        return;\n    }\n    const balancesPorFechas = new (0, $021eu.default)($57cb6a7508f5bff5$var$historial, $57cb6a7508f5bff5$var$ingresos);\n    const resultado = balancesPorFechas.calcularBalancesPorFechas(fechaInicio, fechaFin);\n    const balancesFechasDiv = document.querySelector(\"#balances-fechas-div\");\n    if (!balancesFechasDiv) {\n        console.error(\"El contenedor #balances-fechas-div no existe.\");\n        return;\n    }\n    balancesFechasDiv.innerHTML = `\n    <p><strong>Historial de Balances:</strong></p>\n    <ul>\n      <li>Desde: ${resultado.fechaInicio}</li>\n      <li>Hasta: ${resultado.fechaFin}</li>\n      <li>Total Ingresos: ${resultado.totalIngresos.toFixed(2)}</li>\n      <li>Total Gastos: ${resultado.totalGastos.toFixed(2)}</li>\n      <li>Balance: ${resultado.balance.toFixed(2)}</li>\n    </ul>\n  `;\n};\ndocument.querySelector(\"#generar-balances-fechas-btn\").addEventListener(\"click\", $57cb6a7508f5bff5$var$generarHistorialBalancesPorFechas);\n\n});\nparcelRegister(\"e3h3F\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", () => $a3ae93df6d5caa16$export$2e2bcd8739ae039);\nclass $a3ae93df6d5caa16$var$Balance {\n    constructor(gastos, ingresos){\n        this.gastos = gastos;\n        this.ingresos = ingresos;\n    }\n    calcularBalance() {\n        const totalIngresos = this.ingresos.obtenerIngresos().reduce((acc, ingreso)=>acc + ingreso.monto, 0);\n        const totalGastos = this.gastos.obtenerGastos().reduce((acc, gasto)=>acc + gasto.monto, 0);\n        return totalIngresos - totalGastos;\n    }\n}\nvar $a3ae93df6d5caa16$export$2e2bcd8739ae039 = $a3ae93df6d5caa16$var$Balance;\n\n});\n\nparcelRegister(\"bOScl\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", () => $89ae67dae10a3c86$export$2e2bcd8739ae039);\n\nvar $4I93b = parcelRequire(\"4I93b\");\nclass $89ae67dae10a3c86$var$Gastos {\n    constructor(){\n        this.gastos = [];\n    }\n    registrarGasto(fecha, monto, descripcion, categoria) {\n        const nuevoGasto = new (0, $4I93b.default)(fecha, monto, descripcion, categoria);\n        this.gastos.push(nuevoGasto);\n    }\n    obtenerGastos() {\n        return this.gastos;\n    }\n    obtenerGastosOrdenados() {\n        return this.gastos.sort((a, b)=>new Date(b.fecha) - new Date(a.fecha));\n    }\n    editarGasto(index, nuevoGasto) {\n        if (this.gastos[index]) this.gastos[index] = new (0, $4I93b.default)(nuevoGasto.fecha, nuevoGasto.monto, nuevoGasto.descripcion, nuevoGasto.categoria);\n    }\n    eliminarGasto(index) {\n        if (this.gastos[index]) this.gastos.splice(index, 1);\n    }\n    exportarGastosaExcel() {\n        let csv = \"Fecha,Monto,Descripci\\xf3n,Categor\\xeda\\n\";\n        this.gastos.forEach((gasto)=>{\n            csv += `${gasto.fecha},${gasto.monto},${gasto.descripcion},${gasto.categoria}\\n`;\n        });\n        return csv;\n    }\n}\nvar $89ae67dae10a3c86$export$2e2bcd8739ae039 = $89ae67dae10a3c86$var$Gastos;\n\n});\nparcelRegister(\"4I93b\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", () => $36e24ab2702df180$export$2e2bcd8739ae039);\nclass $36e24ab2702df180$var$Gasto {\n    constructor(fecha, monto, descripcion, categoria){\n        this.fecha = fecha;\n        this.monto = monto;\n        this.descripcion = descripcion;\n        this.categoria = categoria;\n    }\n}\nvar $36e24ab2702df180$export$2e2bcd8739ae039 = $36e24ab2702df180$var$Gasto;\n\n});\n\n\nparcelRegister(\"Z8IgN\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", () => $0b7c74d8b27d7e31$export$2e2bcd8739ae039);\n\nvar $9HzyH = parcelRequire(\"9HzyH\");\nclass $0b7c74d8b27d7e31$var$Ingresos {\n    constructor(){\n        this.ingresos = [];\n    }\n    registrarIngreso(fecha, monto, descripcion) {\n        const nuevoIngreso = new (0, $9HzyH.default)(fecha, monto, descripcion); // Aquí debería usarse la clase Ingreso\n        this.ingresos.push(nuevoIngreso);\n    }\n    obtenerIngresos() {\n        return this.ingresos;\n    }\n    obtenerIngresosOrdenados() {\n        return this.ingresos.sort((a, b)=>new Date(b.fecha) - new Date(a.fecha));\n    }\n    editarIngreso(index, nuevoIngreso) {\n        if (this.ingresos[index]) this.ingresos[index] = new (0, $9HzyH.default)(nuevoIngreso.fecha, nuevoIngreso.monto, nuevoIngreso.descripcion);\n    }\n    eliminarIngreso(index) {\n        if (this.ingresos[index]) this.ingresos.splice(index, 1);\n    }\n}\nvar $0b7c74d8b27d7e31$export$2e2bcd8739ae039 = $0b7c74d8b27d7e31$var$Ingresos;\n\n});\nparcelRegister(\"9HzyH\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", () => $7103b670bea4d7ff$export$2e2bcd8739ae039);\nclass $7103b670bea4d7ff$var$Ingreso {\n    constructor(fecha, monto, descripcion){\n        this.fecha = fecha;\n        this.monto = monto;\n        this.descripcion = descripcion;\n    }\n}\nvar $7103b670bea4d7ff$export$2e2bcd8739ae039 = $7103b670bea4d7ff$var$Ingreso;\n\n});\n\n\nparcelRegister(\"klC2j\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", () => $ed03460c944a38c5$export$2e2bcd8739ae039);\nclass $ed03460c944a38c5$var$Presupuesto {\n    constructor(){\n        this.monto = null;\n    }\n    agregarMonto(monto) {\n        this.monto = monto;\n    }\n    mostrarMonto() {\n        return `Monto: ${this.monto}`;\n    }\n    verificarCercania(gasto) {\n        // Verifica si el gasto está cerca de exceder el presupuesto (entre el 90% y el 100%)\n        const porcentajeUsado = gasto / this.monto * 100;\n        return porcentajeUsado >= 90 && porcentajeUsado <= 100;\n    }\n    verificarPresupuesto(gasto) {\n        console.log(\"Presupuesto actual:\", this.monto, \"Gasto recibido:\", gasto);\n        if (!this.monto) return {\n            estado: \"sin_presupuesto\",\n            mensaje: \"No se ha definido un presupuesto a\\xfan.\"\n        };\n        if (gasto > this.monto) return {\n            estado: \"excedido\",\n            mensaje: \"\\xa1Has excedido el presupuesto general!\"\n        };\n        const porcentajeUsado = gasto / this.monto * 100;\n        if (porcentajeUsado >= 90 && porcentajeUsado <= 100) return {\n            estado: \"cercano\",\n            mensaje: \"\\xa1Est\\xe1s cerca de exceder tu presupuesto general!\"\n        };\n        return {\n            estado: \"dentro\",\n            mensaje: \"El gasto est\\xe1 dentro del presupuesto.\"\n        };\n    }\n}\nvar $ed03460c944a38c5$export$2e2bcd8739ae039 = $ed03460c944a38c5$var$Presupuesto;\n\n});\n\nparcelRegister(\"3OX67\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", () => $2c83e22ed2bfdf55$export$2e2bcd8739ae039);\nparcelRequire(\"bOScl\");\nclass $2c83e22ed2bfdf55$var$Historial {\n    constructor(gastos){\n        this.gastos = gastos;\n    }\n    obtenerGastosOrdenadosPorFecha() {\n        return this.gastos.obtenerGastos().sort((a, b)=>new Date(a.fecha) - new Date(b.fecha));\n    }\n    filtrarGastosPorCategoria(categoria) {\n        return this.gastos.obtenerGastos().filter((gasto)=>gasto.categoria === categoria);\n    }\n    filtrarGastosPorRangoFecha(fechaInicio, fechaFin) {\n        return this.gastos.obtenerGastos().filter((gasto)=>{\n            const fechaGasto = new Date(gasto.fecha);\n            return fechaGasto >= new Date(fechaInicio) && fechaGasto <= new Date(fechaFin);\n        });\n    }\n}\nvar $2c83e22ed2bfdf55$export$2e2bcd8739ae039 = $2c83e22ed2bfdf55$var$Historial;\n\n});\n\nparcelRegister(\"bt1BM\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", () => $8593a68afc221995$export$2e2bcd8739ae039);\nparcelRequire(\"Z8IgN\");\nclass $8593a68afc221995$var$HistorialIngresos {\n    constructor(ingresos){\n        this.ingresos = ingresos;\n    }\n    obtenerIngresosOrdenadosPorFecha() {\n        return this.ingresos.obtenerIngresos().sort((a, b)=>new Date(a.fecha) - new Date(b.fecha));\n    }\n    filtrarIngresosPorRangoFecha(fechaInicio, fechaFin) {\n        return this.ingresos.obtenerIngresos().filter((ingreso)=>{\n            const fechaIngreso = new Date(ingreso.fecha);\n            return fechaIngreso >= new Date(fechaInicio) && fechaIngreso <= new Date(fechaFin);\n        });\n    }\n    filtrarIngresosPorDescripcion(descripcion) {\n        return this.ingresos.obtenerIngresos().filter((ingreso)=>ingreso.descripcion.includes(descripcion));\n    }\n}\nvar $8593a68afc221995$export$2e2bcd8739ae039 = $8593a68afc221995$var$HistorialIngresos;\n\n});\n\nparcelRegister(\"021eu\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", () => $006124d210f213ef$export$2e2bcd8739ae039);\nclass $006124d210f213ef$var$BalancesPorFechas {\n    constructor(historial, ingresos){\n        this.historial = historial;\n        this.ingresos = ingresos;\n    }\n    calcularBalancesPorFechas(fechaInicio, fechaFin) {\n        const gastosEnRango = this.historial.filtrarGastosPorRangoFecha(fechaInicio, fechaFin);\n        const ingresosEnRango = this.ingresos.obtenerIngresos().filter((ingreso)=>{\n            const fechaIngreso = new Date(ingreso.fecha);\n            return fechaIngreso >= new Date(fechaInicio) && fechaIngreso <= new Date(fechaFin);\n        });\n        const totalGastos = gastosEnRango.reduce((acc, gasto)=>acc + gasto.monto, 0);\n        const totalIngresos = ingresosEnRango.reduce((acc, ingreso)=>acc + ingreso.monto, 0);\n        return {\n            fechaInicio: fechaInicio,\n            fechaFin: fechaFin,\n            totalGastos: totalGastos,\n            totalIngresos: totalIngresos,\n            balance: totalIngresos - totalGastos\n        };\n    }\n}\nvar $006124d210f213ef$export$2e2bcd8739ae039 = $006124d210f213ef$var$BalancesPorFechas;\n\n});\n\n\n\n//# sourceMappingURL=presenter.a2878c3a.js.map\n","import Balance from \"./balance.js\";\nimport Gastos from \"./gastos.js\";\nimport Ingresos from \"./ingresos.js\";\nimport Presupuesto from \"./presupuestos.js\";\nimport Historial from \"./historialgastos.js\";\nimport HistorialIngresos from \"./historialingresos.js\"; // Importar historial de ingresos\n\n// Instanciar clases\nconst gastos = new Gastos();\nconst ingresos = new Ingresos();\nconst balance = new Balance(gastos, ingresos);\nconst historial = new Historial(gastos);\nconst historialIngresos = new HistorialIngresos(ingresos); // Crear instancia de HistorialIngresos\n\n// ***** Manejo de Balance *****\nconst balanceDiv = document.querySelector(\"#balance-div\");\n\nconst actualizarBalance = () => {\n  const balanceActual = balance.calcularBalance(); // Calcular el balance\n  balanceDiv.innerHTML = `<p>Balance: ${balanceActual}</p>`; // Mostrar balance\n};\n\n// ***** Manejo de Gastos *****\nconst formGastos = document.querySelector(\"#gastos-form\");\nconst gastosDiv = document.querySelector(\"#gastos-div\");\nconst historialDiv = document.querySelector(\"#historial-div\"); // Div para el historial\n\nconst displayGastos = (gastosAmostrar = []) => {\n  gastosDiv.innerHTML = \"<ul>\";\n  gastosAmostrar.forEach(({ fecha, monto, descripcion, categoria }, index) => {\n    gastosDiv.innerHTML += `<li>${fecha} | ${monto} | ${descripcion} | ${categoria}\n      <button class=\"editar-btn\" data-index=\"${index}\">Editar</button>\n      <button class=\"eliminar-btn\" data-index=\"${index}\">Eliminar</button>\n    </li>`;\n  });\n  gastosDiv.innerHTML += \"</ul>\";\n\n  document.querySelectorAll(\".editar-btn\").forEach((btn) =>\n    btn.addEventListener(\"click\", (event) => {\n      const index = event.target.dataset.index;\n      const gastoSeleccionado = gastos.obtenerGastos()[index];\n      rellenarFormularioGasto(gastoSeleccionado, index);\n    })\n  );\n\n  document.querySelectorAll(\".eliminar-btn\").forEach((btn) =>\n    btn.addEventListener(\"click\", (event) => {\n      const index = event.target.dataset.index;\n      gastos.eliminarGasto(index);\n      displayGastos(historial.obtenerGastosOrdenadosPorFecha());\n      actualizarBalance();\n    })\n  );\n};\n\nformGastos.addEventListener(\"submit\", (event) => {\n  event.preventDefault();\n\n  const fecha = document.querySelector(\"#fecha\").value;\n  const monto = parseFloat(document.querySelector(\"#monto\").value);\n  const descripcion = document.querySelector(\"#descripcion\").value;\n  const categoria = document.querySelector(\"#categoria\").value;\n\n  const nuevoGasto = { fecha, monto, descripcion, categoria };\n\n  // Registrar el gasto\n  gastos.registrarGasto(fecha, monto, descripcion, categoria);\n\n  // Verificar el presupuesto y mostrar notificaciones\n  if (notificacionesDiv) {\n    const resultadoPresupuesto = presupuestito.verificarPresupuesto(nuevoGasto.monto);\n    console.log(\"Resultado de verificación de presupuesto:\", resultadoPresupuesto); // Para depuración\n    notificacionesDiv.innerHTML = `<p>${resultadoPresupuesto.mensaje}</p>`;\n  } else {\n    console.error(\"El elemento #notificaciones no existe en el DOM.\");\n  }\n\n  // Actualizar la vista\n  displayGastos(historial.obtenerGastosOrdenadosPorFecha());\n  actualizarBalance();\n});\n\n// ***** Manejo de Ingresos *****\nconst formIngresos = document.querySelector(\"#ingresos-form\");\nconst ingresosDiv = document.querySelector(\"#ingresos-div\");\n\nconst displayIngresos = (ingresosAmostrar = []) => {\n  ingresosDiv.innerHTML = \"<ul>\";\n  ingresosAmostrar.forEach(({ fecha, monto, descripcion }, index) => {\n    ingresosDiv.innerHTML += `\n      <li>\n        ${fecha} | ${monto} | ${descripcion}\n        <button class=\"editar-btn\" data-index=\"${index}\">Editar</button>\n        <button class=\"eliminar-btn\" data-index=\"${index}\">Eliminar</button>\n      </li>`;\n  });\n  ingresosDiv.innerHTML += \"</ul>\";\n\n  // Añadir eventos a los botones de edición\n  document.querySelectorAll(\".editar-btn\").forEach((btn) =>\n    btn.addEventListener(\"click\", (event) => {\n      const index = event.target.dataset.index;\n      const ingresoSeleccionado = ingresos.obtenerIngresos()[index];\n      rellenarFormularioIngreso(ingresoSeleccionado, index);\n    })\n  );\n\n  document.querySelectorAll(\".eliminar-btn\").forEach((btn) =>\n    btn.addEventListener(\"click\", (event) => {\n      const index = event.target.dataset.index;\n      ingresos.eliminarIngreso(index);\n      actualizarVistaIngresos(); // Actualizar la vista después de eliminar\n    })\n  );\n};\n\nformIngresos.addEventListener(\"submit\", (event) => {\n  event.preventDefault();\n\n  const fechaIngreso = document.querySelector(\"#fecha-ingreso\").value;\n  const montoIngreso = parseFloat(document.querySelector(\"#monto-ingreso\").value);\n  const descripcionIngreso = document.querySelector(\"#fuente-ingreso\").value;\n\n  ingresos.registrarIngreso(fechaIngreso, montoIngreso, descripcionIngreso);\n  actualizarVistaIngresos(); // Actualizar la vista y balance\n});\n\n// ***** Función para rellenar el formulario con los datos del ingreso *****\nconst rellenarFormularioIngreso = (ingreso, index) => {\n  document.querySelector(\"#fecha-ingreso\").value = ingreso.fecha;\n  document.querySelector(\"#monto-ingreso\").value = ingreso.monto;\n  document.querySelector(\"#fuente-ingreso\").value = ingreso.descripcion;\n\n  // Crear o mostrar el botón de guardar cambios\n  let guardarCambiosBtn = document.querySelector(\"#guardar-cambios-btn\");\n  if (!guardarCambiosBtn) {\n    guardarCambiosBtn = document.createElement(\"button\");\n    guardarCambiosBtn.id = \"guardar-cambios-btn\";\n    guardarCambiosBtn.textContent = \"Guardar Cambios\";\n    formIngresos.appendChild(guardarCambiosBtn);\n  }\n\n  guardarCambiosBtn.onclick = (e) => {\n    e.preventDefault();\n\n    // Obtener los nuevos valores del formulario\n    const fecha = document.querySelector(\"#fecha-ingreso\").value;\n    const monto = parseFloat(document.querySelector(\"#monto-ingreso\").value);\n    const descripcion = document.querySelector(\"#fuente-ingreso\").value;\n\n    // Editar el ingreso utilizando la función en `ingresos.js`\n    ingresos.editarIngreso(index, { fecha, monto, descripcion });\n\n    // Actualizar la vista de ingresos y balance\n    actualizarVistaIngresos();\n\n    // Limpiar el formulario y eliminar el botón de guardar cambios\n    formIngresos.reset();\n    guardarCambiosBtn.remove();\n  };\n};\n\n// ***** Actualizar la vista después de registrar o editar *****\nconst actualizarVistaIngresos = () => {\n  displayIngresos(ingresos.obtenerIngresos());\n  actualizarBalance(); // Actualizar el balance\n};\n\n\n// ***** Filtrar por Categoría *****\ndocument.querySelector(\"#filtrar-categoria-btn\").addEventListener(\"click\", () => {\n  const categoria = document.querySelector(\"#filtro-categoria\").value;\n  const gastosFiltrados = historial.filtrarGastosPorCategoria(categoria);\n  displayGastos(gastosFiltrados);\n});\n\n// ***** Filtrar por Rango de Fechas *****\ndocument.querySelector(\"#filtrar-fechas-btn\").addEventListener(\"click\", () => {\n  const fechaInicio = document.querySelector(\"#fecha-inicio\").value;\n  const fechaFin = document.querySelector(\"#fecha-fin\").value;\n  const gastosFiltrados = historial.filtrarGastosPorRangoFecha(fechaInicio, fechaFin);\n  displayGastos(gastosFiltrados);\n});\n\n// Presupuesto\nconst formPresupuesto = document.querySelector(\"#presupuesto-form\");\nconst presupuestoDiv = document.querySelector(\"#presupuesto-div\");\nconst notificacionesDiv = document.querySelector(\"#notificaciones\");\nconst presupuestito = new Presupuesto();\n\n// Registrar un presupuesto general\nformPresupuesto.addEventListener(\"submit\", (event) => {\n  event.preventDefault();\n\n  const montoPresupuesto = parseFloat(document.querySelector(\"#monto-presupuesto\").value);\n  presupuestito.agregarMonto(montoPresupuesto);\n\n  presupuestoDiv.innerHTML = `<p>${presupuestito.mostrarMonto()}</p>`;\n});\n// Verificar y notificar si se excede o se está cerca del presupuesto\nconst verificarPresupuesto = (gasto) => {\n  if (presupuestito.verificarExceso(gasto.monto)) {\n    notificacionesDiv.innerHTML = `<p>¡Has excedido el presupuesto general!</p>`;\n  } else if (presupuestito.verificarCercania(gasto.monto)) {\n    notificacionesDiv.innerHTML = `<p>¡Estás cerca de exceder tu presupuesto general!</p>`;\n  } else {\n    notificacionesDiv.innerHTML = \"\"; // Limpiar notificaciones si no hay problema\n  }\n};\n\n\n\n// Mostrar todos los gastos\ndocument.querySelector(\"#mostrar-todos-btn\").addEventListener(\"click\", () => {\n  const todosLosGastos = gastos.obtenerGastos();\n  displayGastos(todosLosGastos);\n});\n\n// ***** Filtrar ingresos por descripción *****\ndocument.querySelector(\"#filtrar-descripcion-btn\").addEventListener(\"click\", () => {\n  const descripcion = document.querySelector(\"#filtrar-descripcion\").value;\n  const ingresosFiltradosPorDescripcion = historialIngresos.filtrarIngresosPorDescripcion(descripcion);\n  displayIngresos(ingresosFiltradosPorDescripcion);\n});\n\n// ***** Filtrar ingresos por rango de fechas *****\ndocument.querySelector(\"#filtrar-fechas-ingreso-btn\").addEventListener(\"click\", () => {\n  const fechaInicio = document.querySelector(\"#fecha-ingreso-inicio\").value;\n  const fechaFin = document.querySelector(\"#fecha-ingreso-fin\").value;\n  const ingresosFiltradosPorFechas = historialIngresos.filtrarIngresosPorRangoFecha(fechaInicio, fechaFin);\n  displayIngresos(ingresosFiltradosPorFechas);\n});\n\n// Mostrar todos los ingresos\ndocument.querySelector(\"#mostrar-todos-ingresos-btn\").addEventListener(\"click\", () => {\n  displayIngresos(historialIngresos.obtenerIngresosOrdenadosPorFecha());\n});\n\n//editar y eliminar gastos\n//Función para rellenar el formulario con los datos del gasto\nconst rellenarFormularioGasto = (gasto, index) => {\n  document.querySelector(\"#fecha\").value = gasto.fecha;\n  document.querySelector(\"#monto\").value = gasto.monto;\n  document.querySelector(\"#descripcion\").value = gasto.descripcion;\n  document.querySelector(\"#categoria\").value = gasto.categoria;\n\n  // Crear o mostrar el botón de guardar cambios\n  let guardarCambiosBtn = document.querySelector(\"#guardar-cambios-btn\");\n  if (!guardarCambiosBtn) {\n    guardarCambiosBtn = document.createElement(\"button\");\n    guardarCambiosBtn.id = \"guardar-cambios-btn\";\n    guardarCambiosBtn.textContent = \"Guardar Cambios\";\n    formGastos.appendChild(guardarCambiosBtn);\n  }\n\n  guardarCambiosBtn.onclick = (e) => {\n    e.preventDefault();\n\n    // Obtener los nuevos valores del formulario\n    const fecha = document.querySelector(\"#fecha\").value;\n    const monto = parseFloat(document.querySelector(\"#monto\").value);\n    const descripcion = document.querySelector(\"#descripcion\").value;\n    const categoria = document.querySelector(\"#categoria\").value;\n\n    // Editar el gasto utilizando la función en `gastos.js`\n    gastos.editarGasto(index, { fecha, monto, descripcion, categoria });\n\n    // Actualizar la vista de gastos y balance\n    actualizarVistaGastos();\n\n    // Limpiar el formulario y eliminar el botón de guardar cambios\n    formGastos.reset();\n    guardarCambiosBtn.remove();\n  };\n\n  //actualizar vista de gastos\n  const actualizarVistaGastos = () => {\n      const todosLosGastos = gastos.obtenerGastos();\n      displayGastos(todosLosGastos);\n      actualizarBalance();\n    };\n\n    document.querySelector(\"#exportar-excel-btn\").addEventListener(\"click\", () => {\n      const csv = gastos.exportarGastosaExcel();\n      const blob = new Blob([csv], { type: \"text/csv;charset=utf-8;\" });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = \"gastos.csv\";\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n    });\n};\n\nimport BalancesPorFechas from \"./balancesPorFechas.js\";\n\n// Otros imports necesarios\nimport Gastos from \"./gastos.js\";\nimport Ingresos from \"./ingresos.js\";\nimport Historial from \"./historialgastos.js\";\n\n// Aquí se colocan las funciones y manejadores de eventos\nconst generarHistorialBalancesPorFechas = () => {\n  const fechaInicio = document.querySelector(\"#fecha-balance-inicio\").value;\n  const fechaFin = document.querySelector(\"#fecha-balance-fin\").value;\n\n  if (!fechaInicio || !fechaFin) {\n    console.error(\"Debe ingresar un rango de fechas válido.\");\n    return;\n  }\n\n  const balancesPorFechas = new BalancesPorFechas(historial, ingresos);\n  const resultado = balancesPorFechas.calcularBalancesPorFechas(fechaInicio, fechaFin);\n\n  const balancesFechasDiv = document.querySelector(\"#balances-fechas-div\");\n  if (!balancesFechasDiv) {\n    console.error(\"El contenedor #balances-fechas-div no existe.\");\n    return;\n  }\n\n  balancesFechasDiv.innerHTML = `\n    <p><strong>Historial de Balances:</strong></p>\n    <ul>\n      <li>Desde: ${resultado.fechaInicio}</li>\n      <li>Hasta: ${resultado.fechaFin}</li>\n      <li>Total Ingresos: ${resultado.totalIngresos.toFixed(2)}</li>\n      <li>Total Gastos: ${resultado.totalGastos.toFixed(2)}</li>\n      <li>Balance: ${resultado.balance.toFixed(2)}</li>\n    </ul>\n  `;\n};\n\ndocument.querySelector(\"#generar-balances-fechas-btn\").addEventListener(\"click\", generarHistorialBalancesPorFechas);\n\n\n","class Balance {\n    constructor(gastos, ingresos) {\n      this.gastos = gastos;\n      this.ingresos = ingresos;\n    }\n  \n    calcularBalance() {\n      const totalIngresos = this.ingresos.obtenerIngresos().reduce((acc, ingreso) => acc + ingreso.monto, 0);\n      const totalGastos = this.gastos.obtenerGastos().reduce((acc, gasto) => acc + gasto.monto, 0);\n      return totalIngresos - totalGastos;\n    }\n  }\n  \n  export default Balance;\n  ","import Gasto from './gasto.js';\n\nclass Gastos {\n  constructor() {\n    this.gastos = [];\n  }\n\n  registrarGasto(fecha, monto, descripcion, categoria) {\n    const nuevoGasto= new Gasto(fecha, monto, descripcion, categoria);\n    this.gastos.push(nuevoGasto);\n  }\n\n  obtenerGastos() {\n    return this.gastos;\n  }\n\n  obtenerGastosOrdenados() {\n    return this.gastos.sort((a, b) => new Date(b.fecha) - new Date(a.fecha));\n  }\n\n  editarGasto(index, nuevoGasto) {\n    if(this.gastos[index]) {\n      this.gastos[index] = new Gasto(\n        nuevoGasto.fecha,\n        nuevoGasto.monto,\n        nuevoGasto.descripcion,\n        nuevoGasto.categoria\n      );\n  }\n  }\n\n  eliminarGasto(index) {\n    if (this.gastos[index]) {\n    this.gastos.splice(index, 1);\n  }\n  }\n\n  exportarGastosaExcel() {\n    let csv = 'Fecha,Monto,Descripción,Categoría\\n';\n    this.gastos.forEach(gasto => {\n      csv += `${gasto.fecha},${gasto.monto},${gasto.descripcion},${gasto.categoria}\\n`;\n    });\n    return csv;\n  }\n}\n\nexport default Gastos;\n","class Gasto {\n  constructor(fecha, monto, descripcion, categoria) {\n    this.fecha = fecha;\n    this.monto = monto;\n    this.descripcion = descripcion;\n    this.categoria = categoria;\n  }\n}\n\nexport default Gasto;","import Ingreso from './ingresoConstructor.js';\n\nclass Ingresos {\n  constructor() {\n    this.ingresos = [];\n  }\n\n  registrarIngreso(fecha, monto, descripcion) {\n    const nuevoIngreso = new Ingreso(fecha, monto, descripcion); // Aquí debería usarse la clase Ingreso\n    this.ingresos.push(nuevoIngreso);\n  }\n\n  obtenerIngresos() {\n    return this.ingresos;\n  }\n\n  obtenerIngresosOrdenados() {\n    return this.ingresos.sort((a, b) => new Date(b.fecha) - new Date(a.fecha));\n  }\n\n  editarIngreso(index, nuevoIngreso) {\n    if (this.ingresos[index]) {\n      this.ingresos[index] = new Ingreso(\n        nuevoIngreso.fecha,\n        nuevoIngreso.monto,\n        nuevoIngreso.descripcion\n      );\n    }\n  }\n\n  eliminarIngreso(index) {\n    if (this.ingresos[index]) {\n      this.ingresos.splice(index, 1);\n    }\n  }\n}\n\nexport default Ingresos;\n","class Ingreso {\n  constructor(fecha, monto, descripcion) {\n    this.fecha = fecha;\n    this.monto = monto;\n    this.descripcion = descripcion;\n  }\n}\n\nexport default Ingreso;\n","class Presupuesto {\n    constructor() {\n      this.monto = null;\n    }\n    agregarMonto(monto) {\n      this.monto = monto;\n    }\n    mostrarMonto() {\n      return `Monto: ${this.monto}`;\n    }\n    verificarCercania(gasto) {\n      // Verifica si el gasto está cerca de exceder el presupuesto (entre el 90% y el 100%)\n      const porcentajeUsado = (gasto / this.monto) * 100;\n      return porcentajeUsado >= 90 && porcentajeUsado <= 100;\n    }\n  \n    verificarPresupuesto(gasto) {\n      console.log(\"Presupuesto actual:\", this.monto, \"Gasto recibido:\", gasto);\n    \n      if (!this.monto) {\n        return { estado: \"sin_presupuesto\", mensaje: \"No se ha definido un presupuesto aún.\" };\n      }\n    \n      if (gasto > this.monto) {\n        return { estado: \"excedido\", mensaje: \"¡Has excedido el presupuesto general!\" };\n      }\n    \n      const porcentajeUsado = (gasto / this.monto) * 100;\n      if (porcentajeUsado >= 90 && porcentajeUsado <= 100) {\n        return { estado: \"cercano\", mensaje: \"¡Estás cerca de exceder tu presupuesto general!\" };\n      }\n    \n      return { estado: \"dentro\", mensaje: \"El gasto está dentro del presupuesto.\" };\n    }\n    \n}\nexport default Presupuesto;","import { Gastos } from './gastos.js';\n\nclass Historial {\n    constructor(gastos) {\n      this.gastos = gastos;\n    }\n\n    obtenerGastosOrdenadosPorFecha() {\n        return this.gastos.obtenerGastos().sort((a, b) => new Date(a.fecha) - new Date(b.fecha));\n      }\n\n    filtrarGastosPorCategoria(categoria) {\n        return this.gastos.obtenerGastos().filter(gasto => gasto.categoria === categoria);\n     }\n\n     filtrarGastosPorRangoFecha(fechaInicio, fechaFin) {\n      return this.gastos.obtenerGastos().filter(gasto => {\n        const fechaGasto = new Date(gasto.fecha);\n        return fechaGasto >= new Date(fechaInicio) && fechaGasto <= new Date(fechaFin);\n      });\n    }\n}\n\nexport default Historial;","import { Ingresos } from './ingresos.js';\n\nclass HistorialIngresos {\n    constructor(ingresos) {\n      this.ingresos = ingresos;\n    }\n  \n    obtenerIngresosOrdenadosPorFecha() {\n      return this.ingresos.obtenerIngresos().sort((a, b) => new Date(a.fecha) - new Date(b.fecha));\n    }\n  \n    filtrarIngresosPorRangoFecha(fechaInicio, fechaFin) {\n      return this.ingresos.obtenerIngresos().filter(ingreso => {\n        const fechaIngreso = new Date(ingreso.fecha);\n        return fechaIngreso >= new Date(fechaInicio) && fechaIngreso <= new Date(fechaFin);\n      });\n    }\n\n    filtrarIngresosPorDescripcion(descripcion) {\n      return this.ingresos.obtenerIngresos().filter(ingreso => ingreso.descripcion.includes(descripcion));\n    }\n}\n\nexport default HistorialIngresos;\n","class BalancesPorFechas {\n    constructor(historial, ingresos) {\n      this.historial = historial;\n      this.ingresos = ingresos;\n    }\n  \n    calcularBalancesPorFechas(fechaInicio, fechaFin) {\n      const gastosEnRango = this.historial.filtrarGastosPorRangoFecha(fechaInicio, fechaFin);\n      const ingresosEnRango = this.ingresos.obtenerIngresos().filter((ingreso) => {\n        const fechaIngreso = new Date(ingreso.fecha);\n        return fechaIngreso >= new Date(fechaInicio) && fechaIngreso <= new Date(fechaFin);\n      });\n  \n      const totalGastos = gastosEnRango.reduce((acc, gasto) => acc + gasto.monto, 0);\n      const totalIngresos = ingresosEnRango.reduce((acc, ingreso) => acc + ingreso.monto, 0);\n  \n      return {\n        fechaInicio,\n        fechaFin,\n        totalGastos,\n        totalIngresos,\n        balance: totalIngresos - totalGastos,\n      };\n    }\n  }\n  \n  export default BalancesPorFechas;\n  "],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRequire","$parcel$global","globalThis","parcelRegister","register","module","exports","$e3h3F","$bOScl","$Z8IgN","$klC2j","$3OX67","$bt1BM","$021eu","$57cb6a7508f5bff5$var$gastos","default","$57cb6a7508f5bff5$var$ingresos","$57cb6a7508f5bff5$var$balance","$57cb6a7508f5bff5$var$historial","$57cb6a7508f5bff5$var$historialIngresos","$57cb6a7508f5bff5$var$balanceDiv","document","querySelector","$57cb6a7508f5bff5$var$actualizarBalance","balanceActual","calcularBalance","innerHTML","$57cb6a7508f5bff5$var$formGastos","$57cb6a7508f5bff5$var$gastosDiv","$57cb6a7508f5bff5$var$displayGastos","gastosAmostrar","forEach","fecha","monto","descripcion","categoria","index","querySelectorAll","btn","addEventListener","event","target","dataset","$57cb6a7508f5bff5$var$rellenarFormularioGasto","obtenerGastos","eliminarGasto","obtenerGastosOrdenadosPorFecha","preventDefault","value","parseFloat","registrarGasto","$57cb6a7508f5bff5$var$notificacionesDiv","resultadoPresupuesto","$57cb6a7508f5bff5$var$presupuestito","verificarPresupuesto","console","log","mensaje","error","$57cb6a7508f5bff5$var$formIngresos","$57cb6a7508f5bff5$var$ingresosDiv","$57cb6a7508f5bff5$var$displayIngresos","ingresosAmostrar","$57cb6a7508f5bff5$var$rellenarFormularioIngreso","obtenerIngresos","eliminarIngreso","$57cb6a7508f5bff5$var$actualizarVistaIngresos","fechaIngreso","montoIngreso","descripcionIngreso","registrarIngreso","ingreso","guardarCambiosBtn","createElement","id","textContent","appendChild","onclick","editarIngreso","reset","remove","filtrarGastosPorCategoria","fechaInicio","fechaFin","filtrarGastosPorRangoFecha","$57cb6a7508f5bff5$var$formPresupuesto","$57cb6a7508f5bff5$var$presupuestoDiv","montoPresupuesto","agregarMonto","mostrarMonto","filtrarIngresosPorDescripcion","filtrarIngresosPorRangoFecha","obtenerIngresosOrdenadosPorFecha","gasto","editarGasto","actualizarVistaGastos","blob","Blob","exportarGastosaExcel","type","url","URL","createObjectURL","a","href","download","body","click","removeChild","revokeObjectURL","resultado","balancesPorFechas","calcularBalancesPorFechas","balancesFechasDiv","totalIngresos","toFixed","totalGastos","balance","$a3ae93df6d5caa16$export$2e2bcd8739ae039","constructor","gastos","ingresos","reduce","acc","$89ae67dae10a3c86$export$2e2bcd8739ae039","$4I93b","nuevoGasto","push","obtenerGastosOrdenados","sort","b","Date","splice","csv","$36e24ab2702df180$export$2e2bcd8739ae039","$0b7c74d8b27d7e31$export$2e2bcd8739ae039","$9HzyH","nuevoIngreso","obtenerIngresosOrdenados","$7103b670bea4d7ff$export$2e2bcd8739ae039","$ed03460c944a38c5$export$2e2bcd8739ae039","verificarCercania","porcentajeUsado","estado","$2c83e22ed2bfdf55$export$2e2bcd8739ae039","filter","fechaGasto","$8593a68afc221995$export$2e2bcd8739ae039","includes","$006124d210f213ef$export$2e2bcd8739ae039","historial","gastosEnRango","ingresosEnRango"],"version":3,"file":"presenter.a2878c3a.js.map"}